/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package TM470Project.ui;

import TM470Project.Entry;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;

import static TM470Project.TM470ProjectRunner.getController;
import static TM470Project.ui.MainFrame.getWindow;

/**
 * Class representing the window panel for visualising data
 * @author Joao
 * v4 23/07/2023
 */
public class DataViewPanel extends javax.swing.JPanel{

    private JFreeChart lineGraph;
    private XYSeriesCollection dataSet;
    private HashMap<Integer, Double> dayToKcalMap = new HashMap<>();

    /**
     * Creates new form DataViewPanel
     */
    public DataViewPanel() {
        initComponents();
    }

    /**
     * Method for initializing data in a visible form
     */
    public void initialize(){
        dayToKcalMap = new HashMap<>();

        //generate the data set
        dataSet = createDataset();

        //create line graph with the dataset
        lineGraph = ChartFactory.createXYLineChart(
                "Total Kcal per Day",
                "Day",
                "Kcal",
                dataSet
        );

        //sets the Y-axis range to 0 - 100 or 0 - the highest value + 50
        lineGraph.getXYPlot().getRangeAxis().setRange(0, 100);
        double yAxisMax = 0;
        if(!dayToKcalMap.isEmpty()){
            for(int i = 1; i < dayToKcalMap.size(); i++){
                if(dayToKcalMap.get(i) > yAxisMax){
                    yAxisMax = dayToKcalMap.get(i);
                }
            }
            if(yAxisMax > 100){
                lineGraph.getXYPlot().getRangeAxis().setRange(0, yAxisMax + 50);
            }
        }

        //create the ChartPanel containing the line graph
        ChartPanel panel = new ChartPanel(lineGraph);
        panel.setVisible(true);
        panel.setSize(230,205);

        //add the ChartPanel to the data panel
        dataAreaPanel.add(panel);

        //update panel with changes made
        panel.repaint();
    }

    /**
     *  Method for generating data set for the currently selected month
     */
    public void generateMonthData(){
        LocalDate calendarDate = getWindow().getCalendarPanel().getDate();
        LocalDate currentDate = LocalDate.of(calendarDate.getYear(), calendarDate.getMonthValue(), 1);
        List<Entry> entriesForDay;
        double sumOfEntries;

        for(int i = 0; i<calendarDate.getMonth().length(currentDate.isLeapYear()); i++){
            sumOfEntries = 0;
            entriesForDay = getController().findEntryByDate(currentDate);
            if(entriesForDay != null){
                for(Entry entry : entriesForDay){
                    sumOfEntries += (entry.getMetric() * entry.getType().getKcal());
                }
                System.out.println("Sum of entry values for " + currentDate + " is " + sumOfEntries);
            }
            dayToKcalMap.put(currentDate.getDayOfMonth(), sumOfEntries);
            currentDate = currentDate.plusDays(1);
        }
    }

    /**
     * Creates a data set and return it for use by JFreeGraph
     * @return the data set
     */
    public XYSeriesCollection createDataset(){
        dataSet = new XYSeriesCollection();
        XYSeries series = new XYSeries("kcal");

        generateMonthData();

        //add data from dayToKcalMap to the dataSet
        for(int l = 1; l < dayToKcalMap.size(); l++){
            LocalDate date = LocalDate.of(
                    getWindow().getCalendarPanel().getDate().getYear(),
                    getWindow().getCalendarPanel().getDate().getMonthValue(),
                    l);
            series.add(l, dayToKcalMap.get(l));
        }
        dataSet.addSeries(series);

        return dataSet;
    }

    /**
     * This method is called from within the constructor to updateListing the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnButton = new javax.swing.JButton();
        prevMonthButton = new javax.swing.JButton();
        monthLabel = new javax.swing.JLabel();
        nextMonthButton = new javax.swing.JButton();
        dataAreaPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(204, 255, 255));

        returnButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        returnButton.setText("<");
        returnButton.setToolTipText("Return to the previous screen.");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        prevMonthButton.setText("<");
        prevMonthButton.setToolTipText("Previous month");
        prevMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevMonthButtonActionPerformed(evt);
            }
        });

        monthLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        monthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthLabel.setText("<<getDate>>");

        nextMonthButton.setText(">");
        nextMonthButton.setToolTipText("Next month");
        nextMonthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMonthButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dataAreaPanelLayout = new javax.swing.GroupLayout(dataAreaPanel);
        dataAreaPanel.setLayout(dataAreaPanelLayout);
        dataAreaPanelLayout.setHorizontalGroup(
            dataAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        dataAreaPanelLayout.setVerticalGroup(
            dataAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataAreaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(returnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prevMonthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextMonthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(prevMonthButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(monthLabel)
                        .addComponent(nextMonthButton))
                    .addComponent(returnButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataAreaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method for changing the month by 1 going forwards
     * @param evt internal ActionEvent listener for the methods, used by generated code
     */
    private void nextMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMonthButtonActionPerformed
        getWindow().getCalendarPanel().setDate(getWindow().getCalendarPanel().getDate().plusMonths(1));
        updateMonth();
    }//GEN-LAST:event_nextMonthButtonActionPerformed

    /**
     * Method for changing the month by 1 going backwards
     * @param evt internal ActionEvent listener for the methods, used by generated code
     */
    private void prevMonthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevMonthButtonActionPerformed
        getWindow().getCalendarPanel().setDate(getWindow().getCalendarPanel().getDate().minusMonths(1));
        updateMonth();
    }//GEN-LAST:event_prevMonthButtonActionPerformed

    /**
     * Method for changing the screen to the CalendarPanel
     * @param evt Method for changing the month by 1 going backwards
     */
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        getWindow().changeScreen("CALENDAR");
        getWindow().getCalendarPanel().updateMonthLabel();
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * Method for updating the monthLabel variable's text to represent the currently selected month
     */
    public void updateMonth(){
        monthLabel.setText(getWindow().getCalendarPanel().getDate().getMonth().toString().substring(0, 3) + " " + getWindow().getCalendarPanel().getDate().getYear());
        initialize();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataAreaPanel;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JButton nextMonthButton;
    private javax.swing.JButton prevMonthButton;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
